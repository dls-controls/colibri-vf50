The patch below is needed to work around a problem which prevents device nodes
from being processed.  This is discussed in the following e-mail exchange dated
1st April 2019:
    https://www.spinics.net/lists/linux-mtd/msg06145.html
    https://www.spinics.net/lists/linux-mtd/msg06181.html
    https://www.spinics.net/lists/linux-mtd/msg06230.html

$ git diff
diff --git a/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
b/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
index e0c42f36db7f..4af5250db5e6 100644
--- a/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
+++ b/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
@@ -1531,12 +1531,12 @@ static int add_inode(struct stat *st, ino_t inum, void *data,
	ino->flags      = cpu_to_le32(use_flags);
	ino->compr_type = cpu_to_le16(c->default_compr);
	if (data_len) {
-		if (!S_ISLNK(st->st_mode))
-			return err_msg("Expected symlink");
-
		if (!fctx) {
			memcpy(&ino->data, data, data_len);
		} else {
+			if (!S_ISLNK(st->st_mode))
+				return err_msg("Expected symlink");
+
			ret = encrypt_symlink(&ino->data, data, data_len, fctx);
			if (ret < 0)
				return ret;
