Work in progress.

To be done:

- Install toolchain
- Build u-boot
- Build kernel
- Build rootfs
- Upgrade Colibri module from WinCE

Downloaded gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf.tar.xz from
    https://releases.linaro.org/components/toolchain/binaries/6.2-2016.11/arm-linux-gnueabihf/

Cloned u-boot git from git://git.toradex.com/u-boot-toradex.git, checked out
branch 2016.11-toradex

Colibri datasheet downloaded from toradex.com as
    101355-colibri-vf50-datasheet.pdf

Evaluation board datasheet downloaded as
    102284-colibri-evaluation-board-datasheet.pdf

Top level Toradex documentation at
    https://developer.toradex.com/products/colibri-vf50

Reflashing instructions here
    https://developer.toradex.com/knowledge-base/flashing-linux-on-vybrid-modules

U-boot and kernel instructions here
    https://developer.toradex.com/knowledge-base/build-u-boot-and-linux-kernel-from-source-code


Work log

7/5/19

* Untar gcc-linaro...tar.xz and rename result as
    /dls_sw/targetOS/x-tools/gcc-6.2.1-glibc-2.23/arm-linux-gnueabihf

* Repeat clone of git://git.toradex.com/u-boot-toradex.git into
    /scratch/mga83/git/u-boot-toradex

According to instructions we need colibri_vf_defconfig

8/5/19

Working on u-boot build.  Create tar file from git repo via command

    git archive origin/2016.11-toradex --prefix=u-boot-toradex-2016.11/ |
    gzip - >~/targetOS/colibri-vf50/u-boot-toradex-2016.11.tgz

9/5/19

U-boot build complete.

Kernel repo at
    git://git.toradex.com/linux-toradex.git
    We are supposed to use:

        branch: toradex_vf_4.4
        kernel config: colibri_vf_defconfig
        device tree: vf500-colibri-eval-v3.dtb vf610-colibri-eval-v3.dtb

It looks as if we may need to configure our own device tree.  Hmmm

Actually, starting to look really complicated.  Looking at Colibri image here:
//developer1.toradex.com/files/toradex-dev/uploads/media/Colibri/Linux/Images/Colibri-VF_Console-Image_2.7-20180104.tar.bz2

The update.sh script here shows some complexites.

We have the following definitions in the u-boot environment:


#define DFU_ALT_NAND_INFO "vf-bcb part 0,1;u-boot part 0,2;ubi part 0,4"

#define MTDPARTS_DEFAULT    "mtdparts=vf610_nfc:"       \
                "128k(vf-bcb)ro,"       \
                "1408k(u-boot)ro,"      \
                "512k(u-boot-env),"     \
                "-(ubi)"

        BOOTENV \

//         MEM_LAYOUT_ENV_SETTINGS \
        "fdt_addr_r=0x82000000\0" \
        "fdt_high=0xffffffff\0" \
        "initrd_high=0xffffffff\0" \
        "kernel_addr_r=0x81000000\0" \
        "pxefile_addr_r=0x87100000\0" \
        "ramdisk_addr_r=0x82100000\0" \
        "scriptaddr=0x87000000\0"

//        NFS_BOOTCMD \
        "nfsargs=ip=:::::eth0: root=/dev/nfs\0" \
        "nfsboot=run setup; " \
                "setenv bootargs ${defargs} ${nfsargs} " \
                "${setupargs} ${vidargs}; echo Booting from NFS...;" \
                "dhcp ${kernel_addr_r} && "     \
                "tftp ${fdt_addr_r} ${soc}-colibri-${fdt_board}.dtb && " \
                "run fdt_fixup && bootz ${kernel_addr_r} - ${fdt_addr_r}\0" \

//         SD_BOOTCMD \
        "sdargs=root=/dev/mmcblk0p2 ro rootwait\0"      \
        "sdboot=run setup; setenv bootargs ${defargs} ${sdargs} " \
        "${setupargs} ${vidargs}; echo Booting from MMC/SD card...; " \
                "load mmc 0:1 ${kernel_addr_r} ${kernel_file} && " \
                "load mmc 0:1 ${fdt_addr_r} ${soc}-colibri-${fdt_board}.dtb && " \
        "run fdt_fixup && bootz ${kernel_addr_r} - ${fdt_addr_r}\0" \

//         UBI_BOOTCMD \
        "ubiargs=ubi.mtd=ubi root=ubi0:rootfs rw rootfstype=ubifs " \
                "ubi.fm_autoconvert=1\0" \
        "ubiboot=run setup; " \
                "setenv bootargs ${defargs} ${ubiargs} " \
                "${setupargs} ${vidargs}; echo Booting from NAND...; " \
                "ubi part ubi && " \
                "ubi read ${kernel_addr_r} kernel && " \
                "ubi read ${fdt_addr_r} dtb && " \
                "run fdt_fixup && bootz ${kernel_addr_r} - ${fdt_addr_r}\0" \

        "console=ttyLP0\0" \
        "defargs=user_debug=30\0" \
        "dfu_alt_info=" DFU_ALT_NAND_INFO "\0" \
        "fdt_board=eval-v3\0" \
        "fdt_fixup=;\0" \
        "kernel_file=zImage\0" \
        "mtdparts=" MTDPARTS_DEFAULT "\0" \
        "setethupdate=if env exists ethaddr; then; else setenv ethaddr " \
                "00:14:2d:00:00:00; fi; tftpboot ${loadaddr} " \
                "${board}/flash_eth.img && source ${loadaddr}\0" \
        "setsdupdate=mmc rescan && setenv interface mmc && " \
                "fatload ${interface} 0:1 ${loadaddr} " \
                "${board}/flash_blk.img && source ${loadaddr}\0" \
        "setup=setenv setupargs " \
                "console=tty1 console=${console}" \
                ",${baudrate}n8 ${memargs} consoleblank=0 ${mtdparts}\0" \
        "setupdate=run setsdupdate || run setusbupdate || run setethupdate\0" \
        "setusbupdate=usb start && setenv interface usb && " \
                "fatload ${interface} 0:1 ${loadaddr} " \
                "${board}/flash_blk.img && source ${loadaddr}\0" \
        "splashpos=m,m\0" \
        "video-mode=dcufb:640x480-16@60,monitor=lcd\0"

10/5/19

    U-boot successfully flashed.  Simple enough:

    1.  Format SD card for FAT32 (needed to repartition from default for some
        reason, the default partition was not viewable by Eboot).  Use
        gnome-disks tool for this.
    2.  Copy /scratch/mga83/tmp/colibri-vf50/build/u-boot/u-boot-nand.imx to
        SD card
    3.  Insert SD card into development board
    4.  Start up dev board with serial console connected (115200N8), hit space
        immediately to interrupt boot
    5.  Type X to enter command mode
    6.  Reflash with command
            flashloader u-boot-nand.imx

    Initial build of rootfs, need to get toolchain definition right first...

14/5/19

    Rootfs built, but have had to work around interesting problem in ncurses
    build: it seems that an auto-generation process within this build is broken
    by a change in the behaviour of the gcc preprocessor.  Fortunately the fix
    is easy and backwards compatible.

15/5/19

    Still need to sort out building of device tree.  We are offered a choice of
    two .dtb files to build:

        vf500-colibri-eval-v3.dtb
        vf610-colibri-eval-v3.dtb

    Actually, the vf500 bit is the bit that identifies our module.  That should
    be enough.  The source for this file is in

        src/linux-toradex_vf_4.4/arch/arm/boot/dts

    and it is clearly specific to the development board.

    Note: see https://elinux.org/Device_Tree_Reference for dts info.

18/6/19

    Picking up the pieces

19/6/19

    Trying to get to grips with u-boot

    ls mmc 0:1
        Shows content of the SD card, seems to work

    load mmc 0:1 $kernel_addr_r $kernel_file
        Loads kernel image zImage into memory

    bootz $kernel_addr_r
        Fails with error
            FDT and ATAGS support not compiled in - hanging
        Quite possibly because we don't have a .dtb

    load mmc 0:1 ${fdt_addr_r} ${soc}-colibri-${fdt_board}.dtb
        Loads dtb into memory

    bootz ${kernel_addr_r} - ${fdt_addr_r}
        Starts the kernel!  Panics because no rootfs.

    This is excellent progress.  Now need to figure out how to specify the
    rootfs.

    load mmc 0:1 $ramdisk_addr_r imagefile.cpio.gz
        Loads initramfs into memory

    Now trying ramfs boot:

        setenv bootargs rdinit=/sbin/init root=/dev/ram initrd=$ramdisk_addr_r,5200676

        Here the final number is the length of the cpio.gz file

It works!  I don't get a login terminal, but that can be for all sorts of
possible reasons.  So here is the working boot sequence:


load mmc 0:1 $kernel_addr_r $kernel_file
load mmc 0:1 ${fdt_addr_r} ${soc}-colibri-${fdt_board}.dtb
load mmc 0:1 $ramdisk_addr_r imagefile.cpio.gz
setenv bootargs rdinit=/sbin/init root=/dev/ram initrd=$ramdisk_addr_r,5200797
bootz ${kernel_addr_r} - ${fdt_addr_r}

24/6/19

Using a script:

load mmc 0:1 $scriptaddr boot-script.image && source $scriptaddr

1/7/19

Looking at installing on flash.

Some u-boot commands:

    # mtdparts

    device nand0 <vf610_nfc>, # parts = 4
     #: name                size            offset          mask_flags
     0: vf-bcb              0x00020000      0x00000000      1
     1: u-boot              0x00160000      0x00020000      1
     2: u-boot-env          0x00080000      0x00180000      0
     3: ubi                 0x07e00000      0x00200000      0

    active partition: nand0,0 - (vf-bcb) 0x00020000 @ 0x00000000

    defaults:
    mtdids  : nand0=vf610_nfc
    mtdparts: mtdparts=vf610_nfc:128k(vf-bcb)ro,1408k(u-boot)ro,512k(u-boot-env),-(ubi)

Shows partitioning scheme.  We have 128K for vf-bcb (what on earth is this?),
1.375MB for u-boot, 512 K for u-boot-env (seems extravagant!), and the remaining
space, 126 MB, for ubi.  Presumably ubi will have sub-partitions.

At present running `ubi part ubi` fails:

    # ubi part ubi
    ubi0: default fastmap pool size: 50
    ubi0: default fastmap WL pool size: 25
    ubi0: attaching mtd1
    ubi0: scanning is finished
    UBI init error 22

Perhaps `nand erase.part ubi` will work.  Result:

    # nand erase.part ubi

    NAND erase.part: device 0 offset 0x200000, size 0x7e00000
    Skipping bad block at  0x013c0000
    Skipping bad block at  0x07f80000
    Skipping bad block at  0x07fa0000
    Skipping bad block at  0x07fc0000
    Skipping bad block at  0x07fe0000

    OK

Quite concerned about these bad blocks:

    # nand bad

    Device 0 bad blocks:
      013c0000
      07f80000
      07fa0000
      07fc0000
      07fe0000

Apparently bad blocks are routine.


Now `ubi part ubi` seems to work:

    Colibri VFxx # ubi part ubi
    ubi0: default fastmap pool size: 50
    ubi0: default fastmap WL pool size: 25
    ubi0: attaching mtd1
    ubi0: scanning is finished
    ubi0: empty MTD device detected
    ubi0: attached mtd1 (name "mtd=3", size 126 MiB)
    ubi0: PEB size: 131072 bytes (128 KiB), LEB size: 126976 bytes
    ubi0: min./max. I/O unit sizes: 2048/2048, sub-page size 2048
    ubi0: VID header offset: 2048 (aligned 2048), data offset: 4096
    ubi0: good PEBs: 1003, bad PEBs: 5, corrupted PEBs: 0
    ubi0: user volume: 0, internal volumes: 1, max. volumes count: 128
    ubi0: max/mean erase counter: 1/0, WL threshold: 4096, image sequence number: 0
    ubi0: available PEBs: 982, total reserved PEBs: 21, PEBs reserved for bad PEB ha
    ndling: 15

Now let's create kernel and dtb areas.

    # ubi create kernel 0x800000 static
    Creating static volume kernel of size 8388608
    # ubi create dtb 0x20000 static
    Creating static volume dtb of size 131072

Let's write the kernel image:

    # load mmc 0:1 $kernel_addr_r $kernel_file
    2967632 bytes read in 207 ms (13.7 MiB/s)
    # ubi write $kernel_addr_r kernel $filesize
    2967632 bytes written to volume kernel

    # load mmc 0:1 ${fdt_addr_r} ${soc}-colibri-${fdt_board}.dtb
    26187 bytes read in 18 ms (1.4 MiB/s)
    # ubi write $fdt_addr_r dtb $filesize
    26187 bytes written to volume dtb

Looking promising.  Now create the rootfs partition.

    # ubi create rootfs 0 dynamic
    No size specified -> Using max size (115929088)
    Creating dynamic volume rootfs of size 115929088

This gives us 110 MB for rootfs which is ample.  Let's see what running ubiboot
gives us:

    # run ubiboot
    Booting from NAND...
    ubi0: detaching mtd1
    ubi0: mtd1 is detached
    ubi0: default fastmap pool size: 50
    ubi0: default fastmap WL pool size: 25
    ubi0: attaching mtd1
    ubi0: scanning is finished
    ubi0: attached mtd1 (name "mtd=3", size 126 MiB)
    ubi0: PEB size: 131072 bytes (128 KiB), LEB size: 126976 bytes
    ubi0: min./max. I/O unit sizes: 2048/2048, sub-page size 2048
    ubi0: VID header offset: 2048 (aligned 2048), data offset: 4096
    ubi0: good PEBs: 1003, bad PEBs: 5, corrupted PEBs: 0
    ubi0: user volume: 3, internal volumes: 1, max. volumes count: 128
    ubi0: max/mean erase counter: 2/1, WL threshold: 4096, image sequence number: 0
    ubi0: available PEBs: 0, total reserved PEBs: 1003, PEBs reserved for bad PEB ha
    ndling: 15
    No size specified -> Using max size (2967632)
    Read 2967632 bytes from volume kernel to 81000000
    No size specified -> Using max size (26187)
    Read 26187 bytes from volume dtb to 82000000
    Kernel image @ 0x81000000 [ 0x000000 - 0x2d4850 ]
    ## Flattened Device Tree blob at 82000000
       Booting using the fdt blob at 0x82000000
       Using Device Tree in place at 82000000, end 8200964a
       Updating MTD partitions...

    Starting kernel ...

    [    0.000000] Booting Linux on physical CPU 0x0
    ... most of boot elided
    [    1.772398] VFS: Cannot open root device "ubi0:rootfs" or ubi0:rootfs: error -19
    [    1.780000] Please append a correct "root=" boot option; here are the available partitions:
    [    1.788495] Kernel panic - not syncing: VFS: Unable to mount root fs on ubi0:rootfs
    [    1.796186] ---[ end Kernel panic - not syncing: VFS: Unable to mount root fs on ubi0:rootfs

Looking pretty good!

Some advice on UBIFS here:
https://bootlin.com/blog/creating-flashing-ubi-ubifs-images/

Alas, although `ubiupdatevol -t /dev/ubi0_2` seems to have successfully
initialised a volume (or has it?), mounting still fails:

    # mount -t ubifs ubi0:rootfs /mnt
    mount: mounting ubi0:rootfs on /mnt failed: No such device

So, it seems that ubifs is not in /proc/filesystems.

After enabling UBIFS (have to enable MISC_FILESYSTEMS first), the ubi0_0,1,2
nodes have disappeared.  This is nothing to do with the kernel, as booting the
older kernel (still saved in ubi) still fails to see any ubi0* nodes.

It looks as if one of the kernel options is necessary.  If we set both
    ubi.mtd=ubi and ubi.fm_autoconvert=1
then finally we can mount ubi0:rootfs.  Looks like it's the ubi.mtd=ubi part.

2/7/19

We need to automate this process and wrap up.


Dependencies of mtd-utils:

    libuuid-devel
        This is already installed, but seems we need to add
        PKG_CONFIG_PATH=/usr/lib64/pkgconfig
    to the ./configure environment.

    LZO support

4/7/19

Can now install onto UBIFS.  Remaining issues:

* Command line not set in u-boot yet.  Currently using

    ubi.mtd=ubi root=ubi0:rootfs rw rootfstype=ubifs ubi.fm_autoconvert=1 rdinit=/sbin/init ro

  Not at all sure about the ubi.fm_autoconvert flag.

* Having mounted read only, can't remount rw.
* Don't have a strategy for replacing rootfs of a live system.

Boot procedure:

    ubi part ubi
    ubi read $kernel_addr_r kernel
    ubi read $fdt_addr_r dtb
    setenv bootargs ubi.mtd=ubi root=ubi0:rootfs rootfstype=ubifs ro
    bootz $kernel_addr_r - $fdt_addr_r

Even with this simplified bootargs we can't write to the ubifs.  It is reported
by the kernel thus:

    UBIFS (ubi0:2): static UBI volume - read-only mode

This was reasonably easy to fix.  Error was setting the partition to 'static',
was able to recover with the following u-boot commands:

    ubi part ubi
    ubi remove rootfs
    ubi create rootfs 0x2800000 dynamic
    load mmc 0:1 $loadaddr rootfs.img
    ubi write $loadaddr rootfs $filesize


Trying switching to rootfs loaded into memory.  First attempt was to use
    mount -o loop ram
but this seems to kill the kernel.

Now trying:

1.  Enable MTD_NAND_NANDSIM in kernel.  This gives us an extra mtd partition,
and now we have:

    $ cat /proc/mtd
    dev:    size   erasesize  name
    mtd0: 08000000 00004000 "NAND simulator partition 0"
    mtd1: 00020000 00020000 "vf-bcb"
    mtd2: 00160000 00020000 "u-boot"
    mtd3: 00080000 00020000 "u-boot-env"
    mtd4: 07e00000 00020000 "ubi"

Once concern is just how much memory is this using...?  The simulated NAND is as
big as our RAM, this may be an issue.

2.  Can now attach ubi to this and create a volume:

    ubiattach /dev/ubi_ctrl -m 0
    ubimkvol -N testvol -m /dev/ubi1 -t static

This seems to work ok, we now have /dev/ubi1_0 available.

3.  Let's try loading our file image.

    ubiupdatevol /dev/ubi1_0 /tmp/rootfs.img

This also seems to work.  Let's see if we can mount it.

    mount -t ubifs ubi1:testvol /mnt

This fails with errors:
UBIFS error (ubi1:0 pid 177): validate_sb: min. I/O unit mismatch : 2048 in superblock, 512 real
UBIFS error (ubi1:0 pid 177): validate_sb: bad superblock, error 1

Looks like a mismatch between the simulation and the image.  The image was
created with options:
    --space-fixup -c 8112 -e 124KiB -m 2KiB

5/7/19

Hmm.  I think this approach isn't going to work.  Even if we do get ubi1
working, we're still not going to be able to switch_root to it, because only
init can do that, and hacking init is really a step too far.

Ok.  Let's do the business in u-boot instead.  For an automated approach we'll
need to set up u-boot to do the upgrade unattended and triggered from the OS, so
we need:

1.  A way to modify the u-boot environment from the running linux.  It turns out
    u-boot has commands fw_printenv and fw_saveenv for this job, but we'll need
    to get them built and installed.

2.  A tftp server.

Turns out we have two tftp servers available on the development network:

serv0002 (172.23.240.2)
    This serves files from /tftpboot/ on the server.

cs03r-cs-vserv-36 (172.23.247.36)
    This serves files from /dls_sw/work/tftpboot/dev/ and so is more convenient.

Note that fw_setenv is an alias of fw_printenv.

Now need to populate /etc/wf_env.config.  This is described here:
https://developer.ridgerun.com/wiki/index.php/Setting_up_fw_printenv_to_modify_u-boot_environment_variables

and we need one line of the following form

    device-name offset env-size sector-size sector-count

device-name is found by searching /prod/mtd for u-boot-env (or is just /dev/mtd2
if we're not using NANDSIM).

It looks like we probably need:

    /dev/mtd2 0 0x20000 0x20000 1

but the description of the offset part is not too clear.  I *think* it is the
offset into the partition, not the device.  Unfortuately if I get this wrong I'm
going to trash my system.

Ok, this works.  It looks as if offset is indeed the offset into the partition,
and so is useful when u-boot and the environment are in the same partition.


The default u-boot configuration is a tangled and complicated mess.  We want
some fairly simple functionality:

1.  For booting from SD card (for development) we are currently using the
    following command::

        load mmc 0:1 $scriptaddr boot-script.image && source $scriptaddr

    Might make sense to create a persistent alias for this, eg::

        setenv sdboot 'load mmc 0:1 $scriptaddr boot-script.image && source $scriptaddr'

2.  For booting from UBI we need the boot command line to be set appropriately,
    and the the following commands are needed::

        setenv bootargs $ubiargs
        ubi part ubi  &&
        ubi read $kernel_addr_r kernel  &&
        ubi read $fdt_addr_r dtb  &&
        bootz $kernel_addr_r - $fdt_addr_r

    We want something like the following in our bootargs::

        ubiargs=ubi.mtd=ubi root=ubi0:rootfs rootfstype=ubifs ro

3.  For upgrading UBI we need a special boot command, and we need to leave the
    system in the state we want it.

Looking at the default ubiboot command, we have::

    bootargs=$defargs $ubiargs $setupargs $vidargs
    defargs=user_debug=30
    ubiargs=ubi.mtd=ubi root=ubi0:rootfs rw rootfstype=ubifs ubi.fm_autoconvert=1

(and the others aren't defined).


Setting up to use tftp.  Store files to load in

    /dls_sw/work/tftpboot/dev/colibri-vf50/

Server address is 172.23.247.36, we're using 172.23.252.22/20 for our address::

    setenv ipaddr 172.23.252.22
    setenv netmask 255.255.240.0
    setenv gatewayip 172.23.240.254
    tftpboot $scriptaddr 172.23.247.36:/colibri-vf50/boot-script.image
    source $scriptaddr

This works just fine.

18/7/19

Now have working upgrade process.  Major loose ends:

*   Documenting upgrade process and making workflow clear.
*   Sorting out persistent state and network configuration.
*   Device tree: GPIOs and SPI.

Trying to figure out how to do GPIOs.  Am making progress with SPI0 device by
copying definitions from vf610-twr.dts (this contains a 'bus-num = <0>' line,
which we seem to need:


    &dspi0 {
        bus-num = <0>;
        pinctrl-names = "default";
        pinctrl-0 = <&pinctrl_dspi0>;
        status = "okay";

        spidev0: spidev@0 {
            compatible = "toradex,evalspi";
            reg = <0>;
            spi-max-frequency = <10000000>;     /* 10 MHz */
            status = "okay";
        };
    };

    &iomuxc {
        vf610-colibri {
            pinctrl_gpiokeys: gpiokeys {
                fsl,pins = <
                    VF610_PAD_PTB19__GPIO_41    0x218d
                >;
            };

            pinctrl_dspi0: dspi0grp {
                fsl,pins = <
                    VF610_PAD_PTB19__DSPI0_CS0      0x1182
                    VF610_PAD_PTB20__DSPI0_SIN      0x1181
                    VF610_PAD_PTB21__DSPI0_SOUT     0x1182
                    VF610_PAD_PTB22__DSPI0_SCK      0x1182
                >;
            };
        };
    };

However, this produces the following conflict messages from the kernel:

vf610-pinctrl 40048000.iomuxc: pin VF610_PAD_PTB21 already requested by 40048000.iomuxc; cannot claim for 4002c000.dspi0
vf610-pinctrl 40048000.iomuxc: pin-43 (4002c000.dspi0) status -22
vf610-pinctrl 40048000.iomuxc: could not request pin 43 (VF610_PAD_PTB21) from group dspi0grp  on device 40048000.iomuxc
fsl-dspi 4002c000.dspi0: Error applying setting, reverse things back

The only other reference to VF610_PAD_PTB21 seems to be in vf-colibri.dtsi:

    &iomuxc {
        ...
        vf610-colibri {
            ...
            pinctrl_hog_0: hoggrp-0 {
                fsl,pins = <
                    ...
                    VF610_PAD_PTB21__GPIO_43    0x22ed
                    ...
                >;
                ...
            };
            ...
        };
    };

22/7/19

So it seems that the most straightforward way do deal with this is to completely
replace the pinctrl_hog_0 group.  Looking at GPIO definitions seems to be an
immense can of worms.  Here is a useful reference:

    https://developer.toradex.com/knowledge-base/gpio-alphanumeric-to-gpio-numeric-assignment

It seems that we need to worry about five names for each GPIO pin:

1.  Module Pin Name.  This is the descriptive name in the Colibri module
    documentation.
2.  Module Pin Number.  This is the corresponding pin number on the Colibri
    SODIMM connector.
3.  SOC Pin Name.  This is the pin name in the corresponding chip documentation,
    and is used as part of the kernel name when referencing the pin.
4.  SOC GPIO Name.  Don't know what this is.
5.  GPIO number.  This is the number used by the kernel to reference the pin,
    and appears to have no relationship with any of the other numbers.  Looks
    like we need to use the table above for this.

Actually, the mapping table (pp 21-25 of Colibri VFxx Datasheet) records the
GPIO number as PORTn[m] and it turns out that the Linux port number is actually
simply 32*n+m.

We need to use the following GPIOs and analogue inputs:

J3  Fn          SOC         GPIO
--  --          ---         ----
43  SPI0 RXD    PTB20       P1[10]  42
55  XL TRIG     PTB17       P1[7]   39
71  SPI0 CS     PTC0        P1[13]  45      This is SPI0_PCS3
73  SPI0 TXD    PTB21       P1[11]  43
77  SPI0 CLK    PTB22       P1[12]  44
89  SPARE 3     PTA9        P0[2]   2
93  SPARE 4     PTB28       P3[2]   98
95  SPARE 5     PTC30       P3[7]   103
99  SPARE 6     PTD29       P2[1]   65
127 SW1-8       PTD26       P2[4]   68
129 SW1-4       PTD4        P2[19]  83
131 SW1-2       PTE3        P3[12]  108
133 SW1-1       PTD9        P2[24]  88
135 SPARE 1     PTD10       P2[25]  89
137 SPARE 2     PTC29       P3[6]   102     (Mux with USB0_VBUS_DETECT)
2   VCC1V0      ADC1_SE9
4   VCC5V0      ADC0_SE9
6   VCC3V3      ADC1_SE8
8   VCC1V8      ADC0_SE8
??  VCC1V2      ??
86  SPI1 CS     PTD5        P2[20]  84      Already configured
88  SPI1 CLK    PTD8        P2[23]  87      /
90  SPI1 RXD    PTD6        P2[21]  85      /
92  SPI1 TXT    PTD7        P2[22]  86      /
98  A INIT B    PTC1        P1[14]  46
100 A DONE      PTD13       P2[28]  92
102 A PROG B    PTA12       P0[5]   5
104 A DSO       PTD28       P2[2]   66
106 A CLK       PTD31       P1[31]  63
134 INIT B M1   PTA17       P0[7]   7       Programming on-board FPGA
136 DONE M1     PTE21       P3[30]  126     /
138 PROG B M1   PTE22       P3[31]  127     /
140 DSO M1      PTE13       P3[22]  118     /
142 CLK M1      PTE14       P3[23]  119     /
144 SPARE 7     PTE5        P3[14]  110
146 SPARE 8     PTE6        P3[15]  111
184 SPARE 9     PTD25       P2[5]   69

We need the following functions:

SPI0    Pins 43, 55, 71, 73, 77.  Think I have this configured, but I need to
        get the driver working.
SPI1    Pins configured out of the box, same driver issue as SPI0.
SW1     Pins 127, 129, 131, 133 to be configured as GPIO and read.
SPARE   To be ignored
ADC     Pins 2, 4, 6, 8, 14.  Think all except 14 configured out of the box (or
        don't need configuring), but 14 needs configuring.
FPGA    Pins 134, 136, 138, 140, 142 need to be configured as GPIO ... unless
        programming is so slow we can't use user-space IO.
XL TRIG Pin 55.  GPIO, not sure what this is for.

23/7/19

Ok, we now have what seems to be a fairly complete device tree.  Now have the
following loose ends:

* Need to figure out how to talk to SPI
* How do we talk to the ADC?
* How are we going to use the general GPIOs?  Standard approach seems to be to
  write GPIO number to /sys/class/gpio/export and use associated gpioNN file.
* What about FPGA programming?  Is it going to be fast enough?

The ADC driver is fsl,vf610-adc, and it seems we need IIO enabled.  This is
documented here:

    https://developer.toradex.com/knowledge-base/adc-(linux)#Colibri_VFxx

Looks like we find our devices at /sys/bus/iio/devices/iio:device{0,1}

We do also have iio devices in /dev, but no idea how to use them.

Notes on configuring device tree:

1.  Most useful reference is on pp 21-25 of Colibri VFxx Datasheet.
2.  Search in $KERNEL_SRC/arch/arm/boot/dts for appropriate definitions

Our device tree has the following include structure:

    device-tree.dts     -- copied from vf500-colibri-eval-v3.dts
    +-- vf500-colibri.dtsi                  VF50 Colibri module
    |   +-- vf500.dtsi                      VF50 SoC functionality
    |   |   +-- skeleton.dtsi               Minimal device tree
    |   |   +-- vfxxx.dtsi                  Defines VFxx SoC
    |   |   |   +-- vf610-pinfunc.h         Pin IO definitions
    |   |   |   +-- dt-bindings/clock/vf610-clock.h
    |   |   |   +-- dt-bindings/interrupt-controller/irq.h
    |   |   |   +-- dt-bindings/gpio/gpio.h
    |   |   +-- dt-bindings/interrupt-controller/arm-gic.h
    |   +-- vf-colibri.dtsi                 General VF Colibri
    +-- dls-dps.dtsi    -- copied from vf-colibri-eval-v3.dtsi

Here's an interesting curiousity.  The MTD partitioning is passed from U-boot to
the kernel via the device tree!  In U-boot we have

    mtdparts: mtdparts=vf610_nfc:128k(vf-bcb)ro,1408k(u-boot)ro,512k(u-boot-env),-(ubi)

The partitions appear here:

    /sys/firmware/devicetree/base/soc/aips-bus@40080000/nand@400e0000/nand@0

24/7/19

Sorting out persistent variable state (after which it's going to be tempting to
make the rootfs completely read-only).

Major loose ends:

1.  Mount points for /dls_sw/prod, /dls_sw/work
2.  configure-network tool
