# Builds installation images and scripts
#
# We build the following three separate boot scripts and associated images.
#
# 1. boot-script.
#    This is for development, and needs imagefile.cpio.gz.
#
# 2. install-script.
#    This is for initial development and needs rootfs.img.
#
# 3. upgrade-script.
#    This is for tft upgrade and also needs rootfs.img.
#
# Each of the scripts also needs a kernel image and device tree, and the upgrade
# script needs a number of u-boot environment variables to be set, as managed by
# the tftp-upgrade script.


# Pick up the state tree definitions
include $(configdir)/skeleton/COMMON


BOOT_SCRIPTS += initramfs-script
BOOT_SCRIPTS += install-script
BOOT_SCRIPTS += upgrade-script

$(O)/initramfs-script: $(O)/imagefile.cpio.gz
$(O)/install-script: $(O)/rootfs.img
$(O)/upgrade-script: $(O)/rootfs.img

$(O)/%: $(O)

# These options are lifted from
#   https://developer.toradex.com/knowledge-base/u-boot-flashing-methods
# The -e ("logical erase block size") parameter matches the "logical eraseblock
# size" reported by `ubi info` in u-boot.  I'm guessing -m ("minimum I/O unit
# size") corresponds to "smallest flash I/O unit" reported by `ubi info`, and
# I'm unable to find a sensible description of -c.
MKFS_UBIFS_OPTS = --space-fixup -c 8112 -e 124KiB -m 2048

# Digest the original script to transform the readable form into a form that
# u-boot is happy with.  Remove comment lines and blank lines, and join lines
# with trailing backslashes (deleting all leading whitespace on the next line).
SED_COMMANDS = /^\#/d; /^$$/d;
SED_COMMANDS += :x /\\$$/{N; s/\\\n *//; bx};
$(O)/%-script: $(bootdir)/%-script
	sed '$(SED_COMMANDS)' $< >$@

# Wrap up u-boot scripts so u-boot can source them.
%.image: %
	mkimage -T script -d $< $@

# Construct UBIFS from the file image
$(O)/rootfs.img: $(O)/imagefile.cpio
	fakeroot -i $(TARGET_ROOT)/fakeroot.env \
            mkfs.ubifs $(MKFS_UBIFS_OPTS) -o $@ -r $(TARGET_ROOT)/rootfs

$(O)/state.img: $(stateroot)
	mkfs.ubifs $(MKFS_UBIFS_OPTS) -o $@ -r $<

boot: $(BOOT_SCRIPTS:%=$(O)/%.image) $(O)/state.img

# vim: set filetype=make:
