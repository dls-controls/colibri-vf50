# Make file for building Colibri-VF50 u-boot, kernel, rootfs.

TOP := $(CURDIR)

# Build defaults that can be overwritten by the CONFIG file if present

BUILD_TOP = $(TOP)/build

BUILD_ROOT = $(BUILD_TOP)/build
SRC_ROOT = $(BUILD_TOP)/src
UTIL_ROOT = $(BUILD_TOP)/util

KERNEL_BUILD = $(BUILD_ROOT)/linux


U_BOOT_TAG = 2016.11-toradex
CROSS_COMPILE = arm-linux-gnueabihf-

# Downloaded gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf.tar.xz from
#   https://releases.linaro.org/components/toolchain/binaries/
#       6.2-2016.11/arm-linux-gnueabihf/
BINUTILS_DIR = /dls_sw/targetOS/x-tools/arm-linux-gnueabihf/bin

REQUIRED_SYMBOLS += ROOTFS_TOP

DEFAULT_TARGETS += u-boot

include CONFIG

ARCH = arm
export PATH := $(BINUTILS_DIR):$(UTIL_ROOT)/bin:$(PATH)


# ------------------------------------------------------------------------------
# Source file definitions

# This file was generated by:
#  $ git clone git://git.kernel.org/pub/scm/utils/dtc/dtc.git
#  $ cd dtc
#  $ git archive v1.4.1 --prefix=dtc-1.4.1/ |
#    gzip - > dtc-1.4.1.tgz
# Note, it looks like we don't want to use 1.5 as this generates a lot of
# warnings about the device tree syntax, so presumably the syntax has changed.
MD5_SUM_dtc-1.4.1 = 9b7705a019efa74674b5cffb61b74145

# This file was generated by:
#  $ git clone git://git.toradex.com/u-boot-toradex.git
#  $ cd u-boot-toradex
#  $ git archive origin/2016.11-toradex --prefix=u-boot-2016.11-toradex/ |
#    gzip - > u-boot-2016.11-toradex.tgz
MD5_SUM_u-boot-2016.11-toradex = 04f26e0133da6ad8ab16acdd31af48d7


# ------------------------------------------------------------------------------
# Helper code lifted from rootfs and other miscellaneous functions

# Perform a sanity check: make sure the user has defined all the symbols that
# need to be defined.
define _CHECK_SYMBOL
    ifndef $1
        $$(error Must define symbol $1 in CONFIG)
    endif
endef
CHECK_SYMBOL = $(eval $(_CHECK_SYMBOL))
$(foreach sym,$(REQUIRED_SYMBOLS),$(call CHECK_SYMBOL,$(sym)))


# Function for safely quoting a string before exposing it to the shell.
# Wraps string in quotes, and escapes all internal quotes.  Invoke as
#
#   $(call SAFE_QUOTE,string to expand)
#
SAFE_QUOTE = '$(subst ','\'',$(1))'

# )' (Gets vim back in sync)

# Passing makefile exports through is a bit tiresome.  We could mark our
# symbols with export -- but that means *every* command gets them, and I
# don't like that.  This macro instead just exports the listed symbols into a
# called function, designed to be called like:
#
#       $(call EXPORT,$(EXPORTS)) script
#
EXPORT = $(foreach var,$(1),$(var)=$(call SAFE_QUOTE,$($(var))))

# Both kernel and u-boot builds need CROSS_COMPILE and ARCH to be exported
EXPORTS = $(call EXPORT,CROSS_COMPILE ARCH)

# Use the rootfs extraction tool to decompress our source trees.  We ensure that
# the source root is present.
define EXTRACT_FILE
mkdir -p $(SRC_ROOT)
$(ROOTFS_TOP)/scripts/extract-tar $(SRC_ROOT) $1 $2 $(TAR_FILES)
endef


# ------------------------------------------------------------------------------
# Basic rules

default: $(DEFAULT_TARGETS)
.PHONY: default

clean:
	rm -rf $(BUILD_ROOT)
.PHONY: clean

clean-all: clean
	-chmod -R +w $(SRC_ROOT)
	rm -rf $(BUILD_TOP)
.PHONY: clean-all


# ------------------------------------------------------------------------------
# Building Device Tree Compiler
#
# This is a dependency of the u-boot build.

DTC = $(UTIL_ROOT)/bin/dtc

DTC_NAME = dtc-1.4.1
DTC_SRC = $(SRC_ROOT)/$(DTC_NAME)
DTC_BUILD = $(BUILD_ROOT)/dtc


# This is very irritating: cannot build dtc out of tree without a *lot* of
# messing around, really not worthwhile, so we move to build.
$(DTC):
	$(call EXTRACT_FILE,$(DTC_NAME).tgz,$(MD5_SUM_$(DTC_NAME)))
	mkdir -p $(BUILD_ROOT)
	mv $(DTC_SRC) $(DTC_BUILD)
	make -C $(DTC_BUILD)
	make -C $(DTC_BUILD) PREFIX=$(UTIL_ROOT) install

dtc: $(DTC)
.PHONY: dtc


# ------------------------------------------------------------------------------
# Building u-boot
#

U_BOOT_NAME = u-boot-$(U_BOOT_TAG)
U_BOOT_SRC = $(SRC_ROOT)/$(U_BOOT_NAME)
U_BOOT_BUILD = $(BUILD_ROOT)/u-boot

U_BOOT_IMAGE = $(U_BOOT_BUILD)/u-boot-nand.imx

MAKE_U_BOOT = $(EXPORTS) KBUILD_OUTPUT=$(U_BOOT_BUILD) $(MAKE) -C $(U_BOOT_SRC)


$(U_BOOT_SRC):
	$(call EXTRACT_FILE,$(U_BOOT_NAME).tgz,$(MD5_SUM_$(U_BOOT_NAME)))
	chmod -R a-w $(U_BOOT_SRC)

$(U_BOOT_IMAGE): $(DTC) $(U_BOOT_SRC)
	mkdir -p $(U_BOOT_BUILD)
	$(MAKE_U_BOOT) colibri_vf_defconfig
	$(MAKE_U_BOOT)

u-boot: $(U_BOOT_IMAGE)
u-boot-src: $(U_BOOT_SRC)
.PHONY: u-boot u-boot-src
